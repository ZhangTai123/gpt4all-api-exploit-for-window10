# This is a sample Python script.
import json

from langchain import PromptTemplate, LLMChain
from langchain.llms import GPT4All
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def evaluate(question):
    print("question============",question)
    # Use a breakpoint in the code line below to debug your script.
    template = """Question: {question}

Answer: Rewrite the input in a happy tone. """

    prompt = PromptTemplate(template=template, input_variables=["question"])

    local_path = (
        # "D:\workspace\gpt4\gptall\ggml-gpt4all-l13b-snoozy.bin"  # replace with your desired local file path
        "D:\workspace\gpt4\gptall\ggml-gpt4all-j.bin"
    )

    # Callbacks support token-wise streaming
    callbacks = [StreamingStdOutCallbackHandler()]
    # Verbose is required to pass to the callback manager
    llm = GPT4All(model=local_path, callbacks=callbacks, verbose=True)
    # If you want to use a custom model add the backend parameter
    # Check https://docs.gpt4all.io/gpt4all_python.html for supported backends
    llm = GPT4All(model=local_path, backend="gptj", callbacks=callbacks, verbose=True)

    llm_chain = LLMChain(prompt=prompt, llm=llm)



    return llm_chain.run(question)

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/chat',methods=["POST"])
def hello_flask():
    try:
        question = request.values.get('input')
    #body = request.json.get("content").strip()
    #print(body)
        if not question:
            raise ValueError('Missing parameter')
        results = evaluate(question)
        return json.dumps(results, ensure_ascii=False)
    except ValueError as e:
        # 处理异常情况
        error = {'error': str(e)}
        return jsonify(error), 400
    except Exception as e:
        # 记录异常信息
        app.logger.error(f'Unexpected error: {str(e)}')
        error = {'error': 'Internal server error'}
        return jsonify(error), 500


if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8989, debug=False)
